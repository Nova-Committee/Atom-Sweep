plugins {
    id 'java'
    id 'idea'
    id 'maven-publish'

    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.spongepowered.mixin' version '0.7.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1'
}

version = project.minecraft_version + "-" + project.mod_version
group = project.maven_group


configurations {
    library
    implementation.extendsFrom library
}

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'parchment', version: "${parchment_mappings}-${minecraft_version}"

    if (file("./src/main/resources/META-INF/accesstransformer.cfg").exists()) {
        accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    }
    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        gameTestServer {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${mod_id}"
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${mod_id}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
    }
}

if (file("./src/main/resources/${mod_id}.mixins.json").exists()) {
    mixin {
        add sourceSets.main, "${mod_id}.refmap.json"
        config "${mod_id}.mixins.json"
    }
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }

        resources {
            srcDirs = ['src/main/resources', 'src/generated/resources']
        }
    }

    test {
        java {
            srcDirs = ['src/test/java']
        }

        resources {
            srcDirs = ['src/test/resources']
        }
    }
}
repositories {
    maven {
        url 'https://maven.nova-committee.cn/releases'
    }
    flatDir { dirs 'libraries/all' }
    flatDir { dirs 'libraries/classpathOnly' }
    flatDir { dirs 'libraries/runtimeOnly' }
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    compileOnly 'net.luckperms:api:5.4'
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.release.set(JavaLanguageVersion.of("${project.java_version}").asInt())

    javaToolchains {
        compilerFor {
            languageVersion.set(JavaLanguageVersion.of("${project.java_version}"))
        }
    }
}

java {
    def javaVersion = JavaVersion.toVersion("${project.java_version}")
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of("${project.java_version}")
    }
    withSourcesJar()
    archivesBaseName = project.archives_base_name
}

jarJar.enable()

artifacts {
    archives jar
    archives sourcesJar
    archives tasks.jarJar
}

tasks.jarJar.configure {
    classifier ''
}

reobf {
    jarJar {}
}

jar {
    classifier ''
    from sourceSets.main.output
}

jar.finalizedBy('reobfJar')

tasks.jarJar.finalizedBy('reobfJarJar')

tasks.withType(Jar) {
    from file('README.md')
    from file('LICENSE')

    manifest {
        attributes([
                'Specification-Title'     : "${project.name}",
                'Specification-Vendor'    : 'cnlimiter',
                'Specification-Version'   : "${project.version}",
                'Implementation-Title'    : "${mod_name}",
                'Implementation-Version'  : "${project.version}",
                'Implementation-Vendor'   : 'cnlimiter',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    if (file("./src/main/resources/${mod_id}.mixins.json").exists()) {
        manifest {
            attributes 'MixinConfigs': "${mod_id}.mixins.json"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) { publication ->
            from components.java
            version = "${project.version}"
            artifactId = "${project.archives_base_name}"
            groupId = "${project.maven_group}"
            pom {
                name = "${project.mod_name}"
                description = 'Atom Sweep'
                url = ''
                licenses {
                    license {
                        name = 'AGPLV3'
                        url = 'https://www.gnu.org/licenses/gpl-3.0.html'
                    }
                }
                developers {
                    developer {
                        id = 'cnlimiter'
                        name = 'cnlimiter'
                        email = 'cnlimiter@163.com'
                    }
                }
            }

        }
    }
    repositories {
        if (System.getenv('MAVEN_USERNAME') != null && System.getenv('MAVEN_PASSWORD') != null) {
            maven {
                name 'release'
                url = 'https://maven.nova-committee.cn/releases'

                credentials {
                    username System.getenv('MAVEN_USERNAME')
                    password System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}
